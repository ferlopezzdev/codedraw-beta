{
  "version": 3,
  "sources": ["../../monaco-editor/esm/vs/basic-languages/liquid/liquid.js"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { languages } from '../fillers/monaco-editor-core.js';\r\nvar EMPTY_ELEMENTS = [\r\n    'area',\r\n    'base',\r\n    'br',\r\n    'col',\r\n    'embed',\r\n    'hr',\r\n    'img',\r\n    'input',\r\n    'keygen',\r\n    'link',\r\n    'menuitem',\r\n    'meta',\r\n    'param',\r\n    'source',\r\n    'track',\r\n    'wbr'\r\n];\r\nexport var conf = {\r\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\$\\^\\&\\*\\(\\)\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\s]+)/g,\r\n    brackets: [\r\n        ['<!--', '-->'],\r\n        ['<', '>'],\r\n        ['{{', '}}'],\r\n        ['{%', '%}'],\r\n        ['{', '}'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '%', close: '%' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: \"'\", close: \"'\" }\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '<', close: '>' },\r\n        { open: '\"', close: '\"' },\r\n        { open: \"'\", close: \"'\" }\r\n    ],\r\n    onEnterRules: [\r\n        {\r\n            beforeText: new RegExp(\"<(?!(?:\" + EMPTY_ELEMENTS.join('|') + \"))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\r\n            afterText: /^<\\/(\\w[\\w\\d]*)\\s*>$/i,\r\n            action: {\r\n                indentAction: languages.IndentAction.IndentOutdent\r\n            }\r\n        },\r\n        {\r\n            beforeText: new RegExp(\"<(?!(?:\" + EMPTY_ELEMENTS.join('|') + \"))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\r\n            action: { indentAction: languages.IndentAction.Indent }\r\n        }\r\n    ]\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '',\r\n    builtinTags: [\r\n        'if',\r\n        'else',\r\n        'elseif',\r\n        'endif',\r\n        'render',\r\n        'assign',\r\n        'capture',\r\n        'endcapture',\r\n        'case',\r\n        'endcase',\r\n        'comment',\r\n        'endcomment',\r\n        'cycle',\r\n        'decrement',\r\n        'for',\r\n        'endfor',\r\n        'include',\r\n        'increment',\r\n        'layout',\r\n        'raw',\r\n        'endraw',\r\n        'render',\r\n        'tablerow',\r\n        'endtablerow',\r\n        'unless',\r\n        'endunless'\r\n    ],\r\n    builtinFilters: [\r\n        'abs',\r\n        'append',\r\n        'at_least',\r\n        'at_most',\r\n        'capitalize',\r\n        'ceil',\r\n        'compact',\r\n        'date',\r\n        'default',\r\n        'divided_by',\r\n        'downcase',\r\n        'escape',\r\n        'escape_once',\r\n        'first',\r\n        'floor',\r\n        'join',\r\n        'json',\r\n        'last',\r\n        'lstrip',\r\n        'map',\r\n        'minus',\r\n        'modulo',\r\n        'newline_to_br',\r\n        'plus',\r\n        'prepend',\r\n        'remove',\r\n        'remove_first',\r\n        'replace',\r\n        'replace_first',\r\n        'reverse',\r\n        'round',\r\n        'rstrip',\r\n        'size',\r\n        'slice',\r\n        'sort',\r\n        'sort_natural',\r\n        'split',\r\n        'strip',\r\n        'strip_html',\r\n        'strip_newlines',\r\n        'times',\r\n        'truncate',\r\n        'truncatewords',\r\n        'uniq',\r\n        'upcase',\r\n        'url_decode',\r\n        'url_encode',\r\n        'where'\r\n    ],\r\n    constants: ['true', 'false'],\r\n    operators: ['==', '!=', '>', '<', '>=', '<='],\r\n    symbol: /[=><!]+/,\r\n    identifier: /[a-zA-Z_][\\w]*/,\r\n    tokenizer: {\r\n        root: [\r\n            [/\\{\\%\\s*comment\\s*\\%\\}/, 'comment.start.liquid', '@comment'],\r\n            [/\\{\\{/, { token: '@rematch', switchTo: '@liquidState.root' }],\r\n            [/\\{\\%/, { token: '@rematch', switchTo: '@liquidState.root' }],\r\n            [/(<)(\\w+)(\\/>)/, ['delimiter.html', 'tag.html', 'delimiter.html']],\r\n            [/(<)([:\\w]+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\r\n            [/(<\\/)(\\w+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\r\n            [/</, 'delimiter.html'],\r\n            [/\\{/, 'delimiter.html'],\r\n            [/[^<{]+/] // text\r\n        ],\r\n        comment: [\r\n            [/\\{\\%\\s*endcomment\\s*\\%\\}/, 'comment.end.liquid', '@pop'],\r\n            [/./, 'comment.content.liquid']\r\n        ],\r\n        otherTag: [\r\n            [\r\n                /\\{\\{/,\r\n                {\r\n                    token: '@rematch',\r\n                    switchTo: '@liquidState.otherTag'\r\n                }\r\n            ],\r\n            [\r\n                /\\{\\%/,\r\n                {\r\n                    token: '@rematch',\r\n                    switchTo: '@liquidState.otherTag'\r\n                }\r\n            ],\r\n            [/\\/?>/, 'delimiter.html', '@pop'],\r\n            [/\"([^\"]*)\"/, 'attribute.value'],\r\n            [/'([^']*)'/, 'attribute.value'],\r\n            [/[\\w\\-]+/, 'attribute.name'],\r\n            [/=/, 'delimiter'],\r\n            [/[ \\t\\r\\n]+/] // whitespace\r\n        ],\r\n        liquidState: [\r\n            [/\\{\\{/, 'delimiter.output.liquid'],\r\n            [/\\}\\}/, { token: 'delimiter.output.liquid', switchTo: '@$S2.$S3' }],\r\n            [/\\{\\%/, 'delimiter.tag.liquid'],\r\n            [/raw\\s*\\%\\}/, 'delimiter.tag.liquid', '@liquidRaw'],\r\n            [/\\%\\}/, { token: 'delimiter.tag.liquid', switchTo: '@$S2.$S3' }],\r\n            { include: 'liquidRoot' }\r\n        ],\r\n        liquidRaw: [\r\n            [/^(?!\\{\\%\\s*endraw\\s*\\%\\}).+/],\r\n            [/\\{\\%/, 'delimiter.tag.liquid'],\r\n            [/@identifier/],\r\n            [/\\%\\}/, { token: 'delimiter.tag.liquid', next: '@root' }],\r\n        ],\r\n        liquidRoot: [\r\n            [/\\d+(\\.\\d+)?/, 'number.liquid'],\r\n            [/\"[^\"]*\"/, 'string.liquid'],\r\n            [/'[^']*'/, 'string.liquid'],\r\n            [/\\s+/],\r\n            [\r\n                /@symbol/,\r\n                {\r\n                    cases: {\r\n                        '@operators': 'operator.liquid',\r\n                        '@default': ''\r\n                    }\r\n                }\r\n            ],\r\n            [/\\./],\r\n            [\r\n                /@identifier/,\r\n                {\r\n                    cases: {\r\n                        '@constants': 'keyword.liquid',\r\n                        '@builtinFilters': 'predefined.liquid',\r\n                        '@builtinTags': 'predefined.liquid',\r\n                        '@default': 'variable.liquid'\r\n                    }\r\n                }\r\n            ],\r\n            [/[^}|%]/, 'variable.liquid']\r\n        ]\r\n    }\r\n};\r\n"],
  "mappings": ";;;;;;;AAKA,IAAI,iBAAiB;AAAA,EACjB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;AACO,IAAI,OAAO;AAAA,EACd,aAAa;AAAA,EACb,UAAU;AAAA,IACN,CAAC,QAAQ,KAAK;AAAA,IACd,CAAC,KAAK,GAAG;AAAA,IACT,CAAC,MAAM,IAAI;AAAA,IACX,CAAC,MAAM,IAAI;AAAA,IACX,CAAC,KAAK,GAAG;AAAA,IACT,CAAC,KAAK,GAAG;AAAA,EACb;AAAA,EACA,kBAAkB;AAAA,IACd,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,EAC5B;AAAA,EACA,kBAAkB;AAAA,IACd,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,EAC5B;AAAA,EACA,cAAc;AAAA,IACV;AAAA,MACI,YAAY,IAAI,OAAO,YAAY,eAAe,KAAK,GAAG,IAAI,wCAAwC,GAAG;AAAA,MACzG,WAAW;AAAA,MACX,QAAQ;AAAA,QACJ,cAAc,UAAU,aAAa;AAAA,MACzC;AAAA,IACJ;AAAA,IACA;AAAA,MACI,YAAY,IAAI,OAAO,YAAY,eAAe,KAAK,GAAG,IAAI,wCAAwC,GAAG;AAAA,MACzG,QAAQ,EAAE,cAAc,UAAU,aAAa,OAAO;AAAA,IAC1D;AAAA,EACJ;AACJ;AACO,IAAI,WAAW;AAAA,EAClB,cAAc;AAAA,EACd,cAAc;AAAA,EACd,aAAa;AAAA,IACT;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AAAA,EACA,gBAAgB;AAAA,IACZ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AAAA,EACA,WAAW,CAAC,QAAQ,OAAO;AAAA,EAC3B,WAAW,CAAC,MAAM,MAAM,KAAK,KAAK,MAAM,IAAI;AAAA,EAC5C,QAAQ;AAAA,EACR,YAAY;AAAA,EACZ,WAAW;AAAA,IACP,MAAM;AAAA,MACF,CAAC,yBAAyB,wBAAwB,UAAU;AAAA,MAC5D,CAAC,QAAQ,EAAE,OAAO,YAAY,UAAU,oBAAoB,CAAC;AAAA,MAC7D,CAAC,QAAQ,EAAE,OAAO,YAAY,UAAU,oBAAoB,CAAC;AAAA,MAC7D,CAAC,iBAAiB,CAAC,kBAAkB,YAAY,gBAAgB,CAAC;AAAA,MAClE,CAAC,eAAe,CAAC,kBAAkB,EAAE,OAAO,YAAY,MAAM,YAAY,CAAC,CAAC;AAAA,MAC5E,CAAC,cAAc,CAAC,kBAAkB,EAAE,OAAO,YAAY,MAAM,YAAY,CAAC,CAAC;AAAA,MAC3E,CAAC,KAAK,gBAAgB;AAAA,MACtB,CAAC,MAAM,gBAAgB;AAAA,MACvB,CAAC,QAAQ;AAAA;AAAA,IACb;AAAA,IACA,SAAS;AAAA,MACL,CAAC,4BAA4B,sBAAsB,MAAM;AAAA,MACzD,CAAC,KAAK,wBAAwB;AAAA,IAClC;AAAA,IACA,UAAU;AAAA,MACN;AAAA,QACI;AAAA,QACA;AAAA,UACI,OAAO;AAAA,UACP,UAAU;AAAA,QACd;AAAA,MACJ;AAAA,MACA;AAAA,QACI;AAAA,QACA;AAAA,UACI,OAAO;AAAA,UACP,UAAU;AAAA,QACd;AAAA,MACJ;AAAA,MACA,CAAC,QAAQ,kBAAkB,MAAM;AAAA,MACjC,CAAC,aAAa,iBAAiB;AAAA,MAC/B,CAAC,aAAa,iBAAiB;AAAA,MAC/B,CAAC,WAAW,gBAAgB;AAAA,MAC5B,CAAC,KAAK,WAAW;AAAA,MACjB,CAAC,YAAY;AAAA;AAAA,IACjB;AAAA,IACA,aAAa;AAAA,MACT,CAAC,QAAQ,yBAAyB;AAAA,MAClC,CAAC,QAAQ,EAAE,OAAO,2BAA2B,UAAU,WAAW,CAAC;AAAA,MACnE,CAAC,QAAQ,sBAAsB;AAAA,MAC/B,CAAC,cAAc,wBAAwB,YAAY;AAAA,MACnD,CAAC,QAAQ,EAAE,OAAO,wBAAwB,UAAU,WAAW,CAAC;AAAA,MAChE,EAAE,SAAS,aAAa;AAAA,IAC5B;AAAA,IACA,WAAW;AAAA,MACP,CAAC,6BAA6B;AAAA,MAC9B,CAAC,QAAQ,sBAAsB;AAAA,MAC/B,CAAC,aAAa;AAAA,MACd,CAAC,QAAQ,EAAE,OAAO,wBAAwB,MAAM,QAAQ,CAAC;AAAA,IAC7D;AAAA,IACA,YAAY;AAAA,MACR,CAAC,eAAe,eAAe;AAAA,MAC/B,CAAC,WAAW,eAAe;AAAA,MAC3B,CAAC,WAAW,eAAe;AAAA,MAC3B,CAAC,KAAK;AAAA,MACN;AAAA,QACI;AAAA,QACA;AAAA,UACI,OAAO;AAAA,YACH,cAAc;AAAA,YACd,YAAY;AAAA,UAChB;AAAA,QACJ;AAAA,MACJ;AAAA,MACA,CAAC,IAAI;AAAA,MACL;AAAA,QACI;AAAA,QACA;AAAA,UACI,OAAO;AAAA,YACH,cAAc;AAAA,YACd,mBAAmB;AAAA,YACnB,gBAAgB;AAAA,YAChB,YAAY;AAAA,UAChB;AAAA,QACJ;AAAA,MACJ;AAAA,MACA,CAAC,UAAU,iBAAiB;AAAA,IAChC;AAAA,EACJ;AACJ;",
  "names": []
}
