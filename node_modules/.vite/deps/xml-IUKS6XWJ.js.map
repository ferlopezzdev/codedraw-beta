{
  "version": 3,
  "sources": ["../../monaco-editor/esm/vs/basic-languages/xml/xml.js"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { languages } from '../fillers/monaco-editor-core.js';\r\nexport var conf = {\r\n    comments: {\r\n        blockComment: ['<!--', '-->']\r\n    },\r\n    brackets: [['<', '>']],\r\n    autoClosingPairs: [\r\n        { open: '<', close: '>' },\r\n        { open: \"'\", close: \"'\" },\r\n        { open: '\"', close: '\"' }\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '<', close: '>' },\r\n        { open: \"'\", close: \"'\" },\r\n        { open: '\"', close: '\"' }\r\n    ],\r\n    onEnterRules: [\r\n        {\r\n            beforeText: new RegExp(\"<([_:\\\\w][_:\\\\w-.\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\r\n            afterText: /^<\\/([_:\\w][_:\\w-.\\d]*)\\s*>$/i,\r\n            action: {\r\n                indentAction: languages.IndentAction.IndentOutdent\r\n            }\r\n        },\r\n        {\r\n            beforeText: new RegExp(\"<(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\r\n            action: { indentAction: languages.IndentAction.Indent }\r\n        }\r\n    ]\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.xml',\r\n    ignoreCase: true,\r\n    // Useful regular expressions\r\n    qualifiedName: /(?:[\\w\\.\\-]+:)?[\\w\\.\\-]+/,\r\n    tokenizer: {\r\n        root: [\r\n            [/[^<&]+/, ''],\r\n            { include: '@whitespace' },\r\n            // Standard opening tag\r\n            [/(<)(@qualifiedName)/, [{ token: 'delimiter' }, { token: 'tag', next: '@tag' }]],\r\n            // Standard closing tag\r\n            [\r\n                /(<\\/)(@qualifiedName)(\\s*)(>)/,\r\n                [{ token: 'delimiter' }, { token: 'tag' }, '', { token: 'delimiter' }]\r\n            ],\r\n            // Meta tags - instruction\r\n            [/(<\\?)(@qualifiedName)/, [{ token: 'delimiter' }, { token: 'metatag', next: '@tag' }]],\r\n            // Meta tags - declaration\r\n            [/(<\\!)(@qualifiedName)/, [{ token: 'delimiter' }, { token: 'metatag', next: '@tag' }]],\r\n            // CDATA\r\n            [/<\\!\\[CDATA\\[/, { token: 'delimiter.cdata', next: '@cdata' }],\r\n            [/&\\w+;/, 'string.escape']\r\n        ],\r\n        cdata: [\r\n            [/[^\\]]+/, ''],\r\n            [/\\]\\]>/, { token: 'delimiter.cdata', next: '@pop' }],\r\n            [/\\]/, '']\r\n        ],\r\n        tag: [\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            [\r\n                /(@qualifiedName)(\\s*=\\s*)(\"[^\"]*\"|'[^']*')/,\r\n                ['attribute.name', '', 'attribute.value']\r\n            ],\r\n            [\r\n                /(@qualifiedName)(\\s*=\\s*)(\"[^\">?\\/]*|'[^'>?\\/]*)(?=[\\?\\/]\\>)/,\r\n                ['attribute.name', '', 'attribute.value']\r\n            ],\r\n            [\r\n                /(@qualifiedName)(\\s*=\\s*)(\"[^\">]*|'[^'>]*)/,\r\n                ['attribute.name', '', 'attribute.value']\r\n            ],\r\n            [/@qualifiedName/, 'attribute.name'],\r\n            [/\\?>/, { token: 'delimiter', next: '@pop' }],\r\n            [/(\\/)(>)/, [{ token: 'tag' }, { token: 'delimiter', next: '@pop' }]],\r\n            [/>/, { token: 'delimiter', next: '@pop' }]\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            [/<!--/, { token: 'comment', next: '@comment' }]\r\n        ],\r\n        comment: [\r\n            [/[^<\\-]+/, 'comment.content'],\r\n            [/-->/, { token: 'comment', next: '@pop' }],\r\n            [/<!--/, 'comment.content.invalid'],\r\n            [/[<\\-]/, 'comment.content']\r\n        ]\r\n    }\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
