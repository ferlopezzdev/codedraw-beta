{
  "version": 3,
  "sources": ["../../monaco-editor/esm/vs/basic-languages/scala/scala.js"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport var conf = {\r\n    /*\r\n     * `...` is allowed as an identifier.\r\n     * $ is allowed in identifiers.\r\n     * unary_<op> is allowed as an identifier.\r\n     * <name>_= is allowed as an identifier.\r\n     */\r\n    wordPattern: /(unary_[@~!#%^&*()\\-=+\\\\|:<>\\/?]+)|([a-zA-Z_$][\\w$]*?_=)|(`[^`]+`)|([a-zA-Z_$][\\w$]*)/g,\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['/*', '*/']\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: \"'\", close: \"'\" }\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: \"'\", close: \"'\" }\r\n    ],\r\n    folding: {\r\n        markers: {\r\n            start: new RegExp('^\\\\s*//\\\\s*(?:(?:#?region\\\\b)|(?:<editor-fold\\\\b))'),\r\n            end: new RegExp('^\\\\s*//\\\\s*(?:(?:#?endregion\\\\b)|(?:</editor-fold>))')\r\n        }\r\n    }\r\n};\r\nexport var language = {\r\n    tokenPostfix: '.scala',\r\n    // We can't easily add everything from Dotty, but we can at least add some of its keywords\r\n    keywords: [\r\n        'asInstanceOf',\r\n        'catch',\r\n        'class',\r\n        'classOf',\r\n        'def',\r\n        'do',\r\n        'else',\r\n        'extends',\r\n        'finally',\r\n        'for',\r\n        'foreach',\r\n        'forSome',\r\n        'if',\r\n        'import',\r\n        'isInstanceOf',\r\n        'macro',\r\n        'match',\r\n        'new',\r\n        'object',\r\n        'package',\r\n        'return',\r\n        'throw',\r\n        'trait',\r\n        'try',\r\n        'type',\r\n        'until',\r\n        'val',\r\n        'var',\r\n        'while',\r\n        'with',\r\n        'yield',\r\n        // Dotty-specific:\r\n        'given',\r\n        'enum',\r\n        'then'\r\n    ],\r\n    // Dotty-specific:\r\n    softKeywords: ['as', 'export', 'extension', 'end', 'derives', 'on'],\r\n    constants: ['true', 'false', 'null', 'this', 'super'],\r\n    modifiers: [\r\n        'abstract',\r\n        'final',\r\n        'implicit',\r\n        'lazy',\r\n        'override',\r\n        'private',\r\n        'protected',\r\n        'sealed'\r\n    ],\r\n    // Dotty-specific:\r\n    softModifiers: ['inline', 'opaque', 'open', 'transparent', 'using'],\r\n    name: /(?:[a-z_$][\\w$]*|`[^`]+`)/,\r\n    type: /(?:[A-Z][\\w$]*)/,\r\n    // we include these common regular expressions\r\n    symbols: /[=><!~?:&|+\\-*\\/^\\\\%@#]+/,\r\n    digits: /\\d+(_+\\d+)*/,\r\n    hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\r\n    // C# style strings\r\n    escapes: /\\\\(?:[btnfr\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n    fstring_conv: /[bBhHsScCdoxXeEfgGaAt]|[Tn](?:[HIklMSLNpzZsQ]|[BbhAaCYyjmde]|[RTrDFC])/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            // strings\r\n            [/\\braw\"\"\"/, { token: 'string.quote', bracket: '@open', next: '@rawstringt' }],\r\n            [/\\braw\"/, { token: 'string.quote', bracket: '@open', next: '@rawstring' }],\r\n            [/\\bs\"\"\"/, { token: 'string.quote', bracket: '@open', next: '@sstringt' }],\r\n            [/\\bs\"/, { token: 'string.quote', bracket: '@open', next: '@sstring' }],\r\n            [/\\bf\"\"\"\"/, { token: 'string.quote', bracket: '@open', next: '@fstringt' }],\r\n            [/\\bf\"/, { token: 'string.quote', bracket: '@open', next: '@fstring' }],\r\n            [/\"\"\"/, { token: 'string.quote', bracket: '@open', next: '@stringt' }],\r\n            [/\"/, { token: 'string.quote', bracket: '@open', next: '@string' }],\r\n            // numbers\r\n            [/(@digits)[eE]([\\-+]?(@digits))?[fFdD]?/, 'number.float', '@allowMethod'],\r\n            [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?[fFdD]?/, 'number.float', '@allowMethod'],\r\n            [/0[xX](@hexdigits)[Ll]?/, 'number.hex', '@allowMethod'],\r\n            [/(@digits)[fFdD]/, 'number.float', '@allowMethod'],\r\n            [/(@digits)[lL]?/, 'number', '@allowMethod'],\r\n            [/\\b_\\*/, 'key'],\r\n            [/\\b(_)\\b/, 'keyword', '@allowMethod'],\r\n            // identifiers and keywords\r\n            [/\\bimport\\b/, 'keyword', '@import'],\r\n            [/\\b(case)([ \\t]+)(class)\\b/, ['keyword.modifier', 'white', 'keyword']],\r\n            [/\\bcase\\b/, 'keyword', '@case'],\r\n            [/\\bva[lr]\\b/, 'keyword', '@vardef'],\r\n            [\r\n                /\\b(def)([ \\t]+)((?:unary_)?@symbols|@name(?:_=)|@name)/,\r\n                ['keyword', 'white', 'identifier']\r\n            ],\r\n            [/@name(?=[ \\t]*:(?!:))/, 'variable'],\r\n            [/(\\.)(@name|@symbols)/, ['operator', { token: '@rematch', next: '@allowMethod' }]],\r\n            [/([{(])(\\s*)(@name(?=\\s*=>))/, ['@brackets', 'white', 'variable']],\r\n            [\r\n                /@name/,\r\n                {\r\n                    cases: {\r\n                        '@keywords': 'keyword',\r\n                        '@softKeywords': 'keyword',\r\n                        '@modifiers': 'keyword.modifier',\r\n                        '@softModifiers': 'keyword.modifier',\r\n                        '@constants': {\r\n                            token: 'constant',\r\n                            next: '@allowMethod'\r\n                        },\r\n                        '@default': {\r\n                            token: 'identifier',\r\n                            next: '@allowMethod'\r\n                        }\r\n                    }\r\n                }\r\n            ],\r\n            [/@type/, 'type', '@allowMethod'],\r\n            // whitespace\r\n            { include: '@whitespace' },\r\n            // @ annotations.\r\n            [/@[a-zA-Z_$][\\w$]*(?:\\.[a-zA-Z_$][\\w$]*)*/, 'annotation'],\r\n            // delimiters and operators\r\n            [/[{(]/, '@brackets'],\r\n            [/[})]/, '@brackets', '@allowMethod'],\r\n            [/\\[/, 'operator.square'],\r\n            [/](?!\\s*(?:va[rl]|def|type)\\b)/, 'operator.square', '@allowMethod'],\r\n            [/]/, 'operator.square'],\r\n            [/([=-]>|<-|>:|<:|:>|<%)(?=[\\s\\w()[\\]{},\\.\"'`])/, 'keyword'],\r\n            [/@symbols/, 'operator'],\r\n            // delimiter: after number because of .\\d floats\r\n            [/[;,\\.]/, 'delimiter'],\r\n            // symbols\r\n            [/'[a-zA-Z$][\\w$]*(?!')/, 'attribute.name'],\r\n            // characters\r\n            [/'[^\\\\']'/, 'string', '@allowMethod'],\r\n            [\r\n                /(')(@escapes)(')/,\r\n                ['string', 'string.escape', { token: 'string', next: '@allowMethod' }]\r\n            ],\r\n            [/'/, 'string.invalid']\r\n        ],\r\n        import: [\r\n            [/;/, 'delimiter', '@pop'],\r\n            [/^|$/, '', '@pop'],\r\n            [/[ \\t]+/, 'white'],\r\n            [/[\\n\\r]+/, 'white', '@pop'],\r\n            [/\\/\\*/, 'comment', '@comment'],\r\n            [/@name|@type/, 'type'],\r\n            [/[(){}]/, '@brackets'],\r\n            [/[[\\]]/, 'operator.square'],\r\n            [/[\\.,]/, 'delimiter']\r\n        ],\r\n        allowMethod: [\r\n            [/^|$/, '', '@pop'],\r\n            [/[ \\t]+/, 'white'],\r\n            [/[\\n\\r]+/, 'white', '@pop'],\r\n            [/\\/\\*/, 'comment', '@comment'],\r\n            [/(?==>[\\s\\w([{])/, 'keyword', '@pop'],\r\n            [\r\n                /(@name|@symbols)(?=[ \\t]*[[({\"'`]|[ \\t]+(?:[+-]?\\.?\\d|\\w))/,\r\n                {\r\n                    cases: {\r\n                        '@keywords': { token: 'keyword', next: '@pop' },\r\n                        '->|<-|>:|<:|<%': { token: 'keyword', next: '@pop' },\r\n                        '@default': { token: '@rematch', next: '@pop' }\r\n                    }\r\n                }\r\n            ],\r\n            ['', '', '@pop']\r\n        ],\r\n        comment: [\r\n            [/[^\\/*]+/, 'comment'],\r\n            [/\\/\\*/, 'comment', '@push'],\r\n            [/\\*\\//, 'comment', '@pop'],\r\n            [/[\\/*]/, 'comment']\r\n        ],\r\n        case: [\r\n            [/\\b_\\*/, 'key'],\r\n            [/\\b(_|true|false|null|this|super)\\b/, 'keyword', '@allowMethod'],\r\n            [/\\bif\\b|=>/, 'keyword', '@pop'],\r\n            [/`[^`]+`/, 'identifier', '@allowMethod'],\r\n            [/@name/, 'variable', '@allowMethod'],\r\n            [/:::?|\\||@(?![a-z_$])/, 'keyword'],\r\n            { include: '@root' }\r\n        ],\r\n        vardef: [\r\n            [/\\b_\\*/, 'key'],\r\n            [/\\b(_|true|false|null|this|super)\\b/, 'keyword'],\r\n            [/@name/, 'variable'],\r\n            [/:::?|\\||@(?![a-z_$])/, 'keyword'],\r\n            [/=|:(?!:)/, 'operator', '@pop'],\r\n            [/$/, 'white', '@pop'],\r\n            { include: '@root' }\r\n        ],\r\n        string: [\r\n            [/[^\\\\\"\\n\\r]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [\r\n                /\"/,\r\n                {\r\n                    token: 'string.quote',\r\n                    bracket: '@close',\r\n                    switchTo: '@allowMethod'\r\n                }\r\n            ]\r\n        ],\r\n        stringt: [\r\n            [/[^\\\\\"\\n\\r]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/\"(?=\"\"\")/, 'string'],\r\n            [\r\n                /\"\"\"/,\r\n                {\r\n                    token: 'string.quote',\r\n                    bracket: '@close',\r\n                    switchTo: '@allowMethod'\r\n                }\r\n            ],\r\n            [/\"/, 'string']\r\n        ],\r\n        fstring: [\r\n            [/@escapes/, 'string.escape'],\r\n            [\r\n                /\"/,\r\n                {\r\n                    token: 'string.quote',\r\n                    bracket: '@close',\r\n                    switchTo: '@allowMethod'\r\n                }\r\n            ],\r\n            [/\\$\\$/, 'string'],\r\n            [/(\\$)([a-z_]\\w*)/, ['operator', 'identifier']],\r\n            [/\\$\\{/, 'operator', '@interp'],\r\n            [/%%/, 'string'],\r\n            [\r\n                /(%)([\\-#+ 0,(])(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/,\r\n                ['metatag', 'keyword.modifier', 'number', 'metatag']\r\n            ],\r\n            [/(%)(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/, ['metatag', 'number', 'metatag']],\r\n            [/(%)([\\-#+ 0,(])(@fstring_conv)/, ['metatag', 'keyword.modifier', 'metatag']],\r\n            [/(%)(@fstring_conv)/, ['metatag', 'metatag']],\r\n            [/./, 'string']\r\n        ],\r\n        fstringt: [\r\n            [/@escapes/, 'string.escape'],\r\n            [/\"(?=\"\"\")/, 'string'],\r\n            [\r\n                /\"\"\"/,\r\n                {\r\n                    token: 'string.quote',\r\n                    bracket: '@close',\r\n                    switchTo: '@allowMethod'\r\n                }\r\n            ],\r\n            [/\\$\\$/, 'string'],\r\n            [/(\\$)([a-z_]\\w*)/, ['operator', 'identifier']],\r\n            [/\\$\\{/, 'operator', '@interp'],\r\n            [/%%/, 'string'],\r\n            [\r\n                /(%)([\\-#+ 0,(])(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/,\r\n                ['metatag', 'keyword.modifier', 'number', 'metatag']\r\n            ],\r\n            [/(%)(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/, ['metatag', 'number', 'metatag']],\r\n            [/(%)([\\-#+ 0,(])(@fstring_conv)/, ['metatag', 'keyword.modifier', 'metatag']],\r\n            [/(%)(@fstring_conv)/, ['metatag', 'metatag']],\r\n            [/./, 'string']\r\n        ],\r\n        sstring: [\r\n            [/@escapes/, 'string.escape'],\r\n            [\r\n                /\"/,\r\n                {\r\n                    token: 'string.quote',\r\n                    bracket: '@close',\r\n                    switchTo: '@allowMethod'\r\n                }\r\n            ],\r\n            [/\\$\\$/, 'string'],\r\n            [/(\\$)([a-z_]\\w*)/, ['operator', 'identifier']],\r\n            [/\\$\\{/, 'operator', '@interp'],\r\n            [/./, 'string']\r\n        ],\r\n        sstringt: [\r\n            [/@escapes/, 'string.escape'],\r\n            [/\"(?=\"\"\")/, 'string'],\r\n            [\r\n                /\"\"\"/,\r\n                {\r\n                    token: 'string.quote',\r\n                    bracket: '@close',\r\n                    switchTo: '@allowMethod'\r\n                }\r\n            ],\r\n            [/\\$\\$/, 'string'],\r\n            [/(\\$)([a-z_]\\w*)/, ['operator', 'identifier']],\r\n            [/\\$\\{/, 'operator', '@interp'],\r\n            [/./, 'string']\r\n        ],\r\n        interp: [[/{/, 'operator', '@push'], [/}/, 'operator', '@pop'], { include: '@root' }],\r\n        rawstring: [\r\n            [/[^\"]/, 'string'],\r\n            [\r\n                /\"/,\r\n                {\r\n                    token: 'string.quote',\r\n                    bracket: '@close',\r\n                    switchTo: '@allowMethod'\r\n                }\r\n            ]\r\n        ],\r\n        rawstringt: [\r\n            [/[^\"]/, 'string'],\r\n            [/\"(?=\"\"\")/, 'string'],\r\n            [\r\n                /\"\"\"/,\r\n                {\r\n                    token: 'string.quote',\r\n                    bracket: '@close',\r\n                    switchTo: '@allowMethod'\r\n                }\r\n            ],\r\n            [/\"/, 'string']\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, 'white'],\r\n            [/\\/\\*/, 'comment', '@comment'],\r\n            [/\\/\\/.*$/, 'comment']\r\n        ]\r\n    }\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
