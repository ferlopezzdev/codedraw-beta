{
  "version": 3,
  "sources": ["../../monaco-editor/esm/vs/basic-languages/yaml/yaml.js"],
  "sourcesContent": ["export var conf = {\r\n    comments: {\r\n        lineComment: '#'\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: \"'\", close: \"'\" }\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: \"'\", close: \"'\" }\r\n    ],\r\n    folding: {\r\n        offSide: true\r\n    }\r\n};\r\nexport var language = {\r\n    tokenPostfix: '.yaml',\r\n    brackets: [\r\n        { token: 'delimiter.bracket', open: '{', close: '}' },\r\n        { token: 'delimiter.square', open: '[', close: ']' }\r\n    ],\r\n    keywords: ['true', 'True', 'TRUE', 'false', 'False', 'FALSE', 'null', 'Null', 'Null', '~'],\r\n    numberInteger: /(?:0|[+-]?[0-9]+)/,\r\n    numberFloat: /(?:0|[+-]?[0-9]+)(?:\\.[0-9]+)?(?:e[-+][1-9][0-9]*)?/,\r\n    numberOctal: /0o[0-7]+/,\r\n    numberHex: /0x[0-9a-fA-F]+/,\r\n    numberInfinity: /[+-]?\\.(?:inf|Inf|INF)/,\r\n    numberNaN: /\\.(?:nan|Nan|NAN)/,\r\n    numberDate: /\\d{4}-\\d\\d-\\d\\d([Tt ]\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(( ?[+-]\\d\\d?(:\\d\\d)?)|Z)?)?/,\r\n    escapes: /\\\\(?:[btnfr\\\\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,\r\n    tokenizer: {\r\n        root: [\r\n            { include: '@whitespace' },\r\n            { include: '@comment' },\r\n            // Directive\r\n            [/%[^ ]+.*$/, 'meta.directive'],\r\n            // Document Markers\r\n            [/---/, 'operators.directivesEnd'],\r\n            [/\\.{3}/, 'operators.documentEnd'],\r\n            // Block Structure Indicators\r\n            [/[-?:](?= )/, 'operators'],\r\n            { include: '@anchor' },\r\n            { include: '@tagHandle' },\r\n            { include: '@flowCollections' },\r\n            { include: '@blockStyle' },\r\n            // Numbers\r\n            [/@numberInteger(?![ \\t]*\\S+)/, 'number'],\r\n            [/@numberFloat(?![ \\t]*\\S+)/, 'number.float'],\r\n            [/@numberOctal(?![ \\t]*\\S+)/, 'number.octal'],\r\n            [/@numberHex(?![ \\t]*\\S+)/, 'number.hex'],\r\n            [/@numberInfinity(?![ \\t]*\\S+)/, 'number.infinity'],\r\n            [/@numberNaN(?![ \\t]*\\S+)/, 'number.nan'],\r\n            [/@numberDate(?![ \\t]*\\S+)/, 'number.date'],\r\n            // Key:Value pair\r\n            [/(\".*?\"|'.*?'|.*?)([ \\t]*)(:)( |$)/, ['type', 'white', 'operators', 'white']],\r\n            { include: '@flowScalars' },\r\n            // String nodes\r\n            [\r\n                /[^#]+/,\r\n                {\r\n                    cases: {\r\n                        '@keywords': 'keyword',\r\n                        '@default': 'string'\r\n                    }\r\n                }\r\n            ]\r\n        ],\r\n        // Flow Collection: Flow Mapping\r\n        object: [\r\n            { include: '@whitespace' },\r\n            { include: '@comment' },\r\n            // Flow Mapping termination\r\n            [/\\}/, '@brackets', '@pop'],\r\n            // Flow Mapping delimiter\r\n            [/,/, 'delimiter.comma'],\r\n            // Flow Mapping Key:Value delimiter\r\n            [/:(?= )/, 'operators'],\r\n            // Flow Mapping Key:Value key\r\n            [/(?:\".*?\"|'.*?'|[^,\\{\\[]+?)(?=: )/, 'type'],\r\n            // Start Flow Style\r\n            { include: '@flowCollections' },\r\n            { include: '@flowScalars' },\r\n            // Scalar Data types\r\n            { include: '@tagHandle' },\r\n            { include: '@anchor' },\r\n            { include: '@flowNumber' },\r\n            // Other value (keyword or string)\r\n            [\r\n                /[^\\},]+/,\r\n                {\r\n                    cases: {\r\n                        '@keywords': 'keyword',\r\n                        '@default': 'string'\r\n                    }\r\n                }\r\n            ]\r\n        ],\r\n        // Flow Collection: Flow Sequence\r\n        array: [\r\n            { include: '@whitespace' },\r\n            { include: '@comment' },\r\n            // Flow Sequence termination\r\n            [/\\]/, '@brackets', '@pop'],\r\n            // Flow Sequence delimiter\r\n            [/,/, 'delimiter.comma'],\r\n            // Start Flow Style\r\n            { include: '@flowCollections' },\r\n            { include: '@flowScalars' },\r\n            // Scalar Data types\r\n            { include: '@tagHandle' },\r\n            { include: '@anchor' },\r\n            { include: '@flowNumber' },\r\n            // Other value (keyword or string)\r\n            [\r\n                /[^\\],]+/,\r\n                {\r\n                    cases: {\r\n                        '@keywords': 'keyword',\r\n                        '@default': 'string'\r\n                    }\r\n                }\r\n            ]\r\n        ],\r\n        // First line of a Block Style\r\n        multiString: [[/^( +).+$/, 'string', '@multiStringContinued.$1']],\r\n        // Further lines of a Block Style\r\n        //   Workaround for indentation detection\r\n        multiStringContinued: [\r\n            [\r\n                /^( *).+$/,\r\n                {\r\n                    cases: {\r\n                        '$1==$S2': 'string',\r\n                        '@default': { token: '@rematch', next: '@popall' }\r\n                    }\r\n                }\r\n            ]\r\n        ],\r\n        whitespace: [[/[ \\t\\r\\n]+/, 'white']],\r\n        // Only line comments\r\n        comment: [[/#.*$/, 'comment']],\r\n        // Start Flow Collections\r\n        flowCollections: [\r\n            [/\\[/, '@brackets', '@array'],\r\n            [/\\{/, '@brackets', '@object']\r\n        ],\r\n        // Start Flow Scalars (quoted strings)\r\n        flowScalars: [\r\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/'[^']*'/, 'string'],\r\n            [/\"/, 'string', '@doubleQuotedString']\r\n        ],\r\n        doubleQuotedString: [\r\n            [/[^\\\\\"]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/\"/, 'string', '@pop']\r\n        ],\r\n        // Start Block Scalar\r\n        blockStyle: [[/[>|][0-9]*[+-]?$/, 'operators', '@multiString']],\r\n        // Numbers in Flow Collections (terminate with ,]})\r\n        flowNumber: [\r\n            [/@numberInteger(?=[ \\t]*[,\\]\\}])/, 'number'],\r\n            [/@numberFloat(?=[ \\t]*[,\\]\\}])/, 'number.float'],\r\n            [/@numberOctal(?=[ \\t]*[,\\]\\}])/, 'number.octal'],\r\n            [/@numberHex(?=[ \\t]*[,\\]\\}])/, 'number.hex'],\r\n            [/@numberInfinity(?=[ \\t]*[,\\]\\}])/, 'number.infinity'],\r\n            [/@numberNaN(?=[ \\t]*[,\\]\\}])/, 'number.nan'],\r\n            [/@numberDate(?=[ \\t]*[,\\]\\}])/, 'number.date']\r\n        ],\r\n        tagHandle: [[/\\![^ ]*/, 'tag']],\r\n        anchor: [[/[&*][^ ]+/, 'namespace']]\r\n    }\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
