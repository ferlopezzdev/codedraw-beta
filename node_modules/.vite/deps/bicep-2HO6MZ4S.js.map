{
  "version": 3,
  "sources": ["../../monaco-editor/esm/vs/basic-languages/bicep/bicep.js"],
  "sourcesContent": ["// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar bounded = function (text) { return \"\\\\b\" + text + \"\\\\b\"; };\r\nvar identifierStart = '[_a-zA-Z]';\r\nvar identifierContinue = '[_a-zA-Z0-9]';\r\nvar identifier = bounded(\"\" + identifierStart + identifierContinue + \"*\");\r\nvar keywords = [\r\n    'targetScope',\r\n    'resource',\r\n    'module',\r\n    'param',\r\n    'var',\r\n    'output',\r\n    'for',\r\n    'in',\r\n    'if',\r\n    'existing'\r\n];\r\nvar namedLiterals = ['true', 'false', 'null'];\r\nvar nonCommentWs = \"[ \\\\t\\\\r\\\\n]\";\r\nvar numericLiteral = \"[0-9]+\";\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['/*', '*/']\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: \"'\", close: \"'\" },\r\n        { open: \"'''\", close: \"'''\" }\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: \"'\", close: \"'\", notIn: ['string', 'comment'] },\r\n        { open: \"'''\", close: \"'''\", notIn: ['string', 'comment'] }\r\n    ],\r\n    autoCloseBefore: \":.,=}])' \\n\\t\",\r\n    indentationRules: {\r\n        increaseIndentPattern: new RegExp('^((?!\\\\/\\\\/).)*(\\\\{[^}\"\\'`]*|\\\\([^)\"\\'`]*|\\\\[[^\\\\]\"\\'`]*)$'),\r\n        decreaseIndentPattern: new RegExp('^((?!.*?\\\\/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$')\r\n    }\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.bicep',\r\n    brackets: [\r\n        { open: '{', close: '}', token: 'delimiter.curly' },\r\n        { open: '[', close: ']', token: 'delimiter.square' },\r\n        { open: '(', close: ')', token: 'delimiter.parenthesis' }\r\n    ],\r\n    symbols: /[=><!~?:&|+\\-*/^%]+/,\r\n    keywords: keywords,\r\n    namedLiterals: namedLiterals,\r\n    escapes: \"\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|'|\\\\${)\",\r\n    tokenizer: {\r\n        root: [{ include: '@expression' }, { include: '@whitespace' }],\r\n        stringVerbatim: [\r\n            { regex: \"(|'|'')[^']\", action: { token: 'string' } },\r\n            { regex: \"'''\", action: { token: 'string.quote', next: '@pop' } }\r\n        ],\r\n        stringLiteral: [\r\n            { regex: \"\\\\${\", action: { token: 'delimiter.bracket', next: '@bracketCounting' } },\r\n            { regex: \"[^\\\\\\\\'$]+\", action: { token: 'string' } },\r\n            { regex: '@escapes', action: { token: 'string.escape' } },\r\n            { regex: \"\\\\\\\\.\", action: { token: 'string.escape.invalid' } },\r\n            { regex: \"'\", action: { token: 'string', next: '@pop' } }\r\n        ],\r\n        bracketCounting: [\r\n            { regex: \"{\", action: { token: 'delimiter.bracket', next: '@bracketCounting' } },\r\n            { regex: \"}\", action: { token: 'delimiter.bracket', next: '@pop' } },\r\n            { include: 'expression' }\r\n        ],\r\n        comment: [\r\n            { regex: \"[^\\\\*]+\", action: { token: 'comment' } },\r\n            { regex: \"\\\\*\\\\/\", action: { token: 'comment', next: '@pop' } },\r\n            { regex: \"[\\\\/*]\", action: { token: 'comment' } }\r\n        ],\r\n        whitespace: [\r\n            { regex: nonCommentWs },\r\n            { regex: \"\\\\/\\\\*\", action: { token: 'comment', next: '@comment' } },\r\n            { regex: \"\\\\/\\\\/.*$\", action: { token: 'comment' } }\r\n        ],\r\n        expression: [\r\n            { regex: \"'''\", action: { token: 'string.quote', next: '@stringVerbatim' } },\r\n            { regex: \"'\", action: { token: 'string.quote', next: '@stringLiteral' } },\r\n            { regex: numericLiteral, action: { token: 'number' } },\r\n            {\r\n                regex: identifier,\r\n                action: {\r\n                    cases: {\r\n                        '@keywords': { token: 'keyword' },\r\n                        '@namedLiterals': { token: 'keyword' },\r\n                        '@default': { token: 'identifier' }\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    }\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
